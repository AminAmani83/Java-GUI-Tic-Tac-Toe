package gui_xo;

import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import javax.swing.*;

/**
 *
 * @author Amin_Amani
 */
public class XO extends javax.swing.JFrame {

    // Constructor
    public XO() {
        // GUI initialization (IDE Generated)
        initComponents();
        
        // Create an array from all my Buttons (For Automation)
        myButtons = new JButton[9];
        myButtons[0] = a1;
        myButtons[1] = a2;
        myButtons[2] = a3;
        myButtons[3] = b1;
        myButtons[4] = b2;
        myButtons[5] = b3;
        myButtons[6] = c1;
        myButtons[7] = c2;
        myButtons[8] = c3;
        
        // Set Button Text Font & Color
        newGame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        a1 = new javax.swing.JButton();
        b1 = new javax.swing.JButton();
        c1 = new javax.swing.JButton();
        a2 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        b2 = new javax.swing.JButton();
        c2 = new javax.swing.JButton();
        a3 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        c3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        a1.setMaximumSize(new java.awt.Dimension(100, 100));
        a1.setPreferredSize(new java.awt.Dimension(100, 100));
        a1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a1ActionPerformed(evt);
            }
        });

        b1.setMaximumSize(new java.awt.Dimension(100, 100));
        b1.setPreferredSize(new java.awt.Dimension(100, 100));
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        c1.setMaximumSize(new java.awt.Dimension(100, 100));
        c1.setPreferredSize(new java.awt.Dimension(100, 100));
        c1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c1ActionPerformed(evt);
            }
        });

        a2.setMaximumSize(new java.awt.Dimension(100, 100));
        a2.setPreferredSize(new java.awt.Dimension(100, 100));
        a2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a2ActionPerformed(evt);
            }
        });

        b2.setMaximumSize(new java.awt.Dimension(100, 100));
        b2.setPreferredSize(new java.awt.Dimension(100, 100));
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        c2.setMaximumSize(new java.awt.Dimension(100, 100));
        c2.setPreferredSize(new java.awt.Dimension(100, 100));
        c2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c2ActionPerformed(evt);
            }
        });

        a3.setMaximumSize(new java.awt.Dimension(100, 100));
        a3.setPreferredSize(new java.awt.Dimension(100, 100));
        a3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a3ActionPerformed(evt);
            }
        });

        b3.setMaximumSize(new java.awt.Dimension(100, 100));
        b3.setPreferredSize(new java.awt.Dimension(100, 100));
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        c3.setMaximumSize(new java.awt.Dimension(100, 100));
        c3.setPreferredSize(new java.awt.Dimension(100, 100));
        c3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(a1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(c1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(a2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(c2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(c3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(a3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(a3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(a1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(a2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(c1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(c3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void a1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a1ActionPerformed
        if (a1.getText().isEmpty()){
            a1.setText( XOval.X.toString() );
            computersTurn();
        }
    }//GEN-LAST:event_a1ActionPerformed

    private void a2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a2ActionPerformed
        if (a2.getText().isEmpty()){        
            a2.setText( XOval.X.toString() );
            computersTurn();
        }
    }//GEN-LAST:event_a2ActionPerformed

    private void a3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a3ActionPerformed
        if (a3.getText().isEmpty()){
            a3.setText( XOval.X.toString() );
            computersTurn();
        }
    }//GEN-LAST:event_a3ActionPerformed

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        if (b1.getText().isEmpty()){
            b1.setText( XOval.X.toString() );
            computersTurn();
        }
    }//GEN-LAST:event_b1ActionPerformed

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
        if (b2.getText().isEmpty()){
            b2.setText( XOval.X.toString() );
            computersTurn();
        }
    }//GEN-LAST:event_b2ActionPerformed

    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b3ActionPerformed
        if (b3.getText().isEmpty()){        
            b3.setText( XOval.X.toString() );
            computersTurn();
        }
    }//GEN-LAST:event_b3ActionPerformed

    private void c1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c1ActionPerformed
        if (c1.getText().isEmpty()){        
            c1.setText( XOval.X.toString() );
            computersTurn();
        }
    }//GEN-LAST:event_c1ActionPerformed

    private void c2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c2ActionPerformed
        if (c2.getText().isEmpty()){
            c2.setText( XOval.X.toString() );
            computersTurn();
        }
    }//GEN-LAST:event_c2ActionPerformed

    private void c3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c3ActionPerformed
        if (c3.getText().isEmpty()){
            c3.setText( XOval.X.toString() );
            computersTurn();
        }
    }//GEN-LAST:event_c3ActionPerformed

    // Amin Methods
    public void newGame(){
        for (JButton myButton : myButtons){
            myButton.setFont(new Font("Arial", Font.BOLD, 48));
            myButton.setForeground(Color.black);
            myButton.setText("");
        }
        // Create WorkArray Based on My Buttons' Statuses
        updateWorkArray();
    }
    
    public boolean isGameOver(){
        updateWorkArray();
        
        boolean haveEmptyFields = false;
        for(int i=0 ; i<8 ; i++){
            ArrayList<XOval> workArrayCompList = new ArrayList<>();
            for (int j=0 ; j<3 ; j++){
                workArrayCompList.add(workArray[i][j]);
            }
            // Checking for empty fields
            if ( workArrayCompList.contains(XOval.E) ) {
                haveEmptyFields = true;
            }
            // Checking for winners
            if ( Collections.frequency(workArrayCompList, XOval.X) == 3) {
                JOptionPane.showMessageDialog(rootPane, "Congratulation! You Won.");
                return true;
            }
            if ( Collections.frequency(workArrayCompList, XOval.O) == 3) {
                JOptionPane.showMessageDialog(rootPane, "Game Over.");
                return true;
            }
        }
        if (!haveEmptyFields){
            JOptionPane.showMessageDialog(rootPane, "It's a Tie...");
            return true;
        }
        
        return false;
    }
    
    public void updateWorkArray(){
        // myButtons: {a1,a2,a3, b1,b2,b3, c1,c2,c3}
        // workArray: {row1 row2 row3 col1 col2 col3 crs1 crs2}
        for (int i=0 ; i<9 ; i++){ // Creating workArray[0][] to workArray[2][]
            workArray[i/3][i%3] = (myButtons[i].getText().isEmpty())? XOval.E : XOval.valueOf(myButtons[i].getText());
        }
        for (int i=0 ; i<9 ; i++){ // Creating workArray[3][] to workArray[5][]
            workArray[3+i/3][i%3] = workArray[i%3][i/3];
        }
        for (int i=0 ; i<3 ; i++){ // Creating workArray[6][] and workArray[7][]
            workArray[6][i%3] = workArray[i%3][i];
            workArray[7][i%3] = workArray[i%3][2-i];
        }
        
//        workArray[6][0] = workArray[0][0];
//        workArray[6][1] = workArray[1][1];
//        workArray[6][2] = workArray[2][2];
//        
//        workArray[7][0] = workArray[0][2];
//        workArray[7][1] = workArray[1][1];
//        workArray[7][2] = workArray[2][0];
    }
    
    public void updateButtons(int i, int j){ // Set Button Related to workArray[i][j]
        // workArray: {row1 row2 row3 col1 col2 col3 crs1 crs2}        
        // myButtons: {a1,a2,a3, b1,b2,b3, c1,c2,c3}
        int k = 0;
        if (i<6){    // workArray > Col1 to Col3
            k = (i<3)? i*3 + j : j*3 + i-3;
        } else {     // workArray > CRS1 and CRS2
            k = (i==6)? j*4 : (j+1)*2;
        }
        
        myButtons[k].setText( XOval.O.toString() );
        myButtons[k].setForeground(Color.red);
        
//        i=3 j=0 > k=0
//        i=3 j=1 > k=3
//        i=3 j=2 > k=6
//        i=4 j=0 > k=1
//        i=4 j=1 > k=4
//        i=4 j=2 > k=7
//        i=5 j=0 > k=2
//        i=5 j=1 > k=5
//        i=5 j=2 > k=8
    }

    public void computersTurn() { // Computer's Strategy
        // This code uses workArray to decide computer's next move,
        // then calls updateButtons() on the desired empty field.

        if (isGameOver()){ // This also updates the workArray
            newGame();
            return; // don't check anything else.
        }
        
        // 1. If there are 2 O's in a line somewhere, place the 3rd one and win!
        for(int i=0 ; i<8 ; i++){
            ArrayList<XOval> workArrayCompList = new ArrayList<>();
            for (int j=0 ; j<3 ; j++){
                workArrayCompList.add(workArray[i][j]);
            }
            if ( Collections.frequency(workArrayCompList, XOval.O) == 2 && Collections.frequency(workArrayCompList, XOval.E) == 1) {
                updateButtons(i , workArrayCompList.indexOf(XOval.E));
                if (isGameOver()){ // This also updates the workArray
                    newGame();
                }
                return; // if this happens, don't check the rest of conditions.
            }
        }
        
        // 2. If there are 2 X's in a line somewhere, place the O to prevent loss.
        for(int i=0 ; i<8 ; i++){
            ArrayList<XOval> workArrayCompList = new ArrayList<>();
            for (int j=0 ; j<3 ; j++){
                workArrayCompList.add(workArray[i][j]);
            }
            if ( Collections.frequency(workArrayCompList, XOval.X) == 2 && Collections.frequency(workArrayCompList, XOval.E) == 1) {
                updateButtons(i , workArrayCompList.indexOf(XOval.E));
                if (isGameOver()){ // This also updates the workArray
                    newGame();
                }
                return; // if this happens, don't check the rest of conditions.
            }
        }
        
        // 3. If none of the above happened, and the center is empty, fill it.
        if ( workArray[1][1] == XOval.E ){
            updateButtons(1 , 1);
            if (isGameOver()){ // This also updates the workArray
                newGame();
            }
            return; // if this happens, don't check the rest of conditions.
        }
        
        // Shuffle the workArray before the next 2 steps
        // Create an integer array from 0 to 7, then shuffle the numbers
        ArrayList<Integer> shuffled = new ArrayList<>();
        for (int i=0 ; i<8 ; i++){
            shuffled.add(i);    
        }
        Collections.shuffle(shuffled);
        // shuffled array is something like this: {5, 4, 7, 0, 1, 6, 3, 2}
        
        // 4. If there is an O and 2 E's somewhere, choose one of the E's to place O.
        for(int i=0 ; i<8 ; i++){
            ArrayList<XOval> workArrayCompList = new ArrayList<>();
            for (int j=0 ; j<3 ; j++){
                workArrayCompList.add(workArray[shuffled.get(i)][j]);
            }
            if ( Collections.frequency(workArrayCompList, XOval.O) == 1 && Collections.frequency(workArrayCompList, XOval.E) == 2) {
//                System.out.println("i: " + shuffled.get(i) + " " + workArrayCompList.toString() + " Updating index: " + workArrayCompList.indexOf(XOval.E));
                if (shuffled.get(0) % 2 == 0){ // instead of generating a random Nr.
                    updateButtons(shuffled.get(i) , workArrayCompList.indexOf(XOval.E));
                } else {
                    updateButtons(shuffled.get(i) , workArrayCompList.lastIndexOf(XOval.E));
                }
                if (isGameOver()){ // This also updates the workArray
                    newGame();
                }
                return; // if this happens, don't check the rest of conditions.
            }
        }
        
        // 5. If none of the above happened, Choose Randomly
        for(int i=0 ; i<8 ; i++){
           ArrayList<XOval> workArrayCompList = new ArrayList<>();
           for (int j=0 ; j<3 ; j++){
               workArrayCompList.add(workArray[shuffled.get(i)][j]);
           }
           if (workArrayCompList.contains(XOval.E)) {
               switch (Collections.frequency(workArrayCompList, XOval.E)) {
                   case 3:
                       updateButtons(i , (int)(Math.random()*3)); // j = 0, 1 or 2
                       break;
                   case 2:
                       if (shuffled.get(0) % 2 == 0){ // instead of generating a random Nr.
                           updateButtons(shuffled.get(i) , workArrayCompList.indexOf(XOval.E));
                       } else {
                           updateButtons(shuffled.get(i) , workArrayCompList.lastIndexOf(XOval.E));
                       }  break;
                   default:
                       updateButtons(i , workArrayCompList.indexOf(XOval.E));
                       break;
               }

               if (isGameOver()){ // This also updates the workArray
                   newGame();
               }
               return; // if this happens, don't check the rest of conditions.
           }
        }   
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new XO().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton a1;
    private javax.swing.JButton a2;
    private javax.swing.JButton a3;
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton c1;
    private javax.swing.JButton c2;
    private javax.swing.JButton c3;
    private javax.swing.Box.Filler filler1;
    // End of variables declaration//GEN-END:variables
    // Amin Variables
    private JButton[] myButtons;
    private XOval[][] workArray = new XOval[8][3];
}
